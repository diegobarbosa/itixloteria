
IRegras
	- ValidarVolante(IVolante)
	- EhApostaVencedora(IResultado, IVolante)
	

IResultado
IVolante
IJogoProcessor


===========================================
# Jogo<IVolante,IResultado> // Single table inheritance
	- IdJogo
	- CodigoWeb
	- Nome 
	- Status : ATV, CANC
	- Descricao
	
	
	- ValidarVolante(IVolante) // pensar em algo de reflection para volante e resultado
	- EhApostaVencedora(IResultado, IVolante)
	
	
	#@ Regras // uma classe para cada jogo, não precisa estar na classe base
		- 60 numeros
		- Seleciona 6
		- Vence 6, 5, 4 acertos
	

	public class SenaJogo<SenaJogo.Volante, Sena.Resultado> : Jogo
	{
		- ValidarVolante(IVolante) // pensar em algo de reflection para volante e resultado
		- EhApostaVencedora(IResultado, IVolante)
	
	
		#@ Regras // uma classe para cada jogo, não precisa estar na classe base
			- 60 numeros
			- Seleciona 6
			- Vence 6, 5, 4 acertos
	
	}
	
	
	
# JogoRepo
	- GetTodos()
	- ByCodigoWeb()
	- ByIdJogo()

============================================
# Concurso
	- IdConcurso
	- IdJogo
	- Codigo
	- Status: Aberto | Concluido
	- Vencedores
		- Nome, IdJogo
	
	#@Resultado 
	

# ConcursoRepo
	- GetTodos()
	- GetAtualByIdJogo()
	- GetByIdConcurso()
	
============================================
	
# Aposta
	- IdAposta
	- IdConcurso
	- IdJogo
	- Data
	#@ Volante
		- 6 numeros selecionados
		
new Aposta(jogo, concurso, IVoltante)
{
	jogo.ValidarVolante(ivolante)
}
		
	
# ApostaRepo
	- GetTodos()
	- ByIdAposta()
	- ByIdJogo()
============================================

// Classe Genérica	
# MaquinaDeNumerosAleatorios
	- List<int> Sortear(TotalDeNumeros, quantidadeParaSortear)
	

============================================


# ProcessarConcursoService
	- Executar(int idConcurso)
	
# JogoProcessorFactory // usa reflection
	- Build(concurso)

	Cria: 
	
# SenaProcessor
	- Executar(concurso)
	
	var apostas = apostasRepoByIdConcurso(concurso.idConcurso)
	var jogo = jogoRepo.ByIdJogo(concurso.idJogo)
	var resultado = MaquinaDeNumerosAleatorios.Executar(jogo...)
	
	
	var vencedores = apostas.where(aposta=> jogo.apostaVencedora(aposta)).ToList()
	
	concurso.finalizar(vencedores) 
		status = finalizado
		vencedores = ...

# LotoManiaProcessor
	- Executar(concurso)

============================================

#Fluxo

- Lista os jogos disponíveis: Mega Sena, Sena, LotoMania
	- O usuário seleciona um jogo
	- O sistema abre a tela com jogo
	- O usuário faz quantas apostas desejar, preenchendo N volantes
	- O usuário conclui as apostas
	
- Sorteio: Página do Sorteio
	- Botão para Executar o Sorteio
	- Listar os vencedores
 
	
	
	
	
	
	
	
	